plugins {
    id 'jacoco'
    id 'com.github.kt3k.coveralls' version '2.8.2'
    id "com.jfrog.bintray" version "1.8.0"
}


// Apply the java plugin to add support for Java
apply plugin: 'java'
apply plugin: 'maven'
apply plugin: 'eclipse'
apply plugin: 'jacoco'
apply plugin: 'maven-publish'

coveralls {
    sourceDirs = files(subprojects.sourceSets.main.allSource.srcDirs).files.absolutePath
}


jacoco {
        toolVersion = '0.7.9'
}

jacocoTestReport {
        reports {
            html.enabled = true
            xml.enabled = true
            csv.enabled = false
        }
}


// Create the pom configuration:
def pomConfig = {
    licenses {
        license {
            name "The Apache Software License, Version 2.0"
            url "http://www.apache.org/licenses/LICENSE-2.0.txt"
            distribution "repo"
        }
    }
    developers {
        developer {
            id "sleroy"
            name "Sylvain Leroy"
            email "contact@sylvainleroy.com"
        }
    }
    
    scm {
       url "https://github.com/java-data-faker"
    }
}

publishing {
    publications {
        BintrayPublication(MavenPublication) {
            from components.java
            artifact sourcesJar {
                classifier "sources"
            }
            artifact javadocJar {
                classifier "javadoc"
            }
            groupId 'com.com.byoskill.datafaker'
            artifactId 'java-data-faker'
            version project.version
            pom.withXml {
                def root = asNode()
                root.appendNode('description', 'Test framework to initialize Pojo and Stubs with random data')
                root.appendNode('name', 'java-data-faker')
                root.appendNode('url', 'https://sylvainleroy.com')
                root.children().last() + pomConfig
            }
        }
    }
}




bintray {
 	user = project.hasProperty('bintrayUser') ? project.property('bintrayUser') : System.getenv('BINTRAY_USER')
	key = project.hasProperty('bintrayApiKey') ? project.property('bintrayApiKey') : System.getenv('BINTRAY_API_KEY')
	publications = ['BintrayPublication']
	pkg {
		repo = 'maven'
		name = 'java-data-faker'
		userOrg = user
		licenses = ['Apache-2.0']
		vcsUrl = 'https://github.com/bintray/gradle-bintray-plugin.git'
		labels = ['gear', 'gore', 'gorilla']
		publicDownloadNumbers = true
		attributes= ['a': ['ay1', 'ay2'], 'b': ['bee'], c: 'cee'] //Optional package-level attributes
		version {
			name = project.version
			desc = 'Test framework to initialize Pojo and Stubs with random data'
			released  = new Date()			
		}
	}
}




// In this section you declare where to find the dependencies of your project
repositories {
    // Use 'jcenter' for resolving your dependencies.
    // You can declare any Maven/Ivy/file repository here.
    jcenter()
    maven { url "https://dl.bintray.com/tocea/java-data-faker" } 
}

// In this section you declare the dependencies for your production and test code
dependencies {
    testCompile "org.slf4j:slf4j-api:$SLF4J_VERSION"
    compile group: 'org.apache.commons', name: 'commons-lang3', version: COMMONS_LANG3
    compile "junit:junit:$JUNIT_VERSION"   
    compile group: 'com.github.javafaker', name: 'javafaker', version: FAKER
    compile group: 'commons-beanutils', name: 'commons-beanutils', version: BEAN_UTILS
  
    testCompile group: 'ch.qos.logback', name: 'logback-classic', version: '1.2.3'
    
    
    


}

task jacocoRootReport(type: org.gradle.testing.jacoco.tasks.JacocoReport) {
    dependsOn = subprojects.test
    sourceDirectories = files(subprojects.sourceSets.main.allSource.srcDirs)
    classDirectories =  files(subprojects.sourceSets.main.output)
    executionData = files(subprojects.jacocoTestReport.executionData)
    reports {
        html.enabled = true
        xml.enabled = true
        csv.enabled = false
    }
}

task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

javadoc.failOnError = false
task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

artifacts {
    archives sourcesJar
    archives javadocJar
}
